apply from: 'libraries.gradle'
group = 'com.ld'
version = '1.0'

allprojects {
    buildDir = 'target'

    apply plugin: 'java'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'idea'
    apply plugin: 'maven'

    sourceCompatibility = '1.7'
	targetCompatibility = '1.7'


    repositories {
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter/'}
	mavenLocal()
        mavenCentral()
    }

    eclipse {
        classpath {
            downloadSources=true
        }
    }

    configurations {
        provided {
            // todo : need to make sure these are non-exported
            description = 'Non-exported compile-time dependencies.'
        }
    }

    sourceSets.main.compileClasspath += configurations.provided
    eclipse.classpath.plusConfigurations += configurations.provided
    sourceSets.main.resources {
        if (project.hasProperty('profile')) {
            srcDir 'src/main/resources-' + project.profile
            srcDir 'src/test/resources-' + project.profile
        }
    }

    tasks.withType(Compile) { options.encoding = 'UTF-8' }

    eclipseProject.doLast {
        if (!new File("$projectDir/src").exists() && !new File("$projectDir/gen-java").exists()) {
            ant.delete dir: '.settings'
            ant.delete file: '.project'
            ant.delete file: '.classpath'
        }
    }

    task 'create-dirs' << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }

	task listJars << {
		configurations.compile.each { File file -> println file.name }
	}

    task zip(type: Zip) {
        from ('script') { into('bin') }
        from ('src/main/resources') { into('conf') }
        if (project.hasProperty('profile'))
            from ('src/main/resources-' + project.profile) { into('conf') }
        into('lib') {
            from ('lib')
            from (jar.outputs.files)
            from (configurations.compile)
        }
    }
    zip.doFirst {
        if (new File("$projectDir/script").exists()) {
            classpath = new File("$projectDir/script/.classpath")
            if (!classpath.exists()) classpath.createNewFile()
            cp = 'CLASSPATH='
            for(file in new File("$projectDir/lib").listFiles()) cp += '../lib/' + file.name + ';'
            for(file in configurations.compile) cp += '../lib/' + file.name + ';'
            for(file in jar.outputs.files) cp += '../lib/' + file.name + ';'
            classpath.text = cp.substring(0, cp.length() - 1)
        }
    }

	tasks.withType(War) {
		manifest {
			attributes("Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Built-By": System.getProperty('user.name'),
			"Built-JDK": System.getProperty('java.version'),
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
			)
		}
	}

	tasks.withType(Jar) {
		manifest {
			attributes("Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Built-By": System.getProperty('user.name'),
			"Built-JDK": System.getProperty('java.version'),
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
			)
		}
	}

    task packageTests(type: Jar) {
	baseName = "${project.archivesBaseName}-test"
 	from sourceSets.test.output
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    // 编译groovy代码时采用 MacRoman
    tasks.withType(GroovyCompile) {
        groovyOptions.encoding = 'MacRoman'
    }

    // 编译JAVADOC文件时采用 UTF-8
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    // 编译JAVA文件时采用 UTF-8
    tasks.withType(Compile) {
        options.encoding = 'UTF-8'
    }
    
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}
